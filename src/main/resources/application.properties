# Be aware that "User" is a reserved word in SQL and for H2 it is a keyword - therefore we need to add NON_KEYWORDS=USER to the db-url
spring.datasource.url=jdbc:h2:mem:zwitscher;NON_KEYWORDS=USER
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.h2.console.settings.web-allow-others=true
# Dump to file
#spring.datasource.url=jdbc:h2:file:./db.dat

# When you set a username the application will pretend that this user is logged in
# Use-Case: For quicker feedback cycles some students may decide to host the frontend not in the static folder of the spring boot application (on each change you need to restart the Spring Boot server)
# Instead you can use the integrated IntelliJ web server which live-reloads the changes to the frontend.
# The only problem is that authentication does not work when backend and frontend run on different servers/ports (due to CORS policy, cookies only set by header if they are of same origin)
# To circumvent this you can use the below flag. The backend will pretend that below user is logged in, indpeendent of the sent cookie
login.default=iDontHack
#login.default=admin